// Generated by dts-bundle-generator v8.0.1

export type Delivery = {
	Monday: string;
	Tuesday: string;
	Wednesday: string;
	Thursday: string;
	Friday: string;
	Saturday: string;
	Sunday: string;
};
export type LimitationsOnDimensions = {
	Width: number;
	Height: number;
	Length: number;
};
export type NpGetSettlementsResponseAddress = {
	Present: string;
	Warehouses: number;
	MainDescription: string;
	Area: string;
	Region: string;
	SettlementTypeCode: string;
	Ref: string;
	DeliveryCity: string;
	AddressDeliveryAllowed: boolean;
	StreetsAvailability: boolean;
	ParentRegionTypes: string;
	ParentRegionCode: string;
	RegionTypes: string;
	RegionTypesCode: string;
};
export type NpGetWarehousesResponseData = {
	SiteKey: string;
	Description: string;
	DescriptionRu: string;
	ShortAddress: string;
	ShortAddressRu: string;
	Phone: string;
	TypeOfWarehouse: string;
	Ref: string;
	Number: string;
	CityRef: string;
	CityDescription: string;
	CityDescriptionRu: string;
	SettlementRef: string;
	SettlementDescription: string;
	SettlementAreaDescription: string;
	SettlementRegionsDescription: string;
	SettlementTypeDescription: string;
	SettlementTypeDescriptionRu: string;
	Longitude: string;
	Latitude: string;
	PostFinance: string;
	BicycleParking: string;
	PaymentAccess: string;
	POSTerminal: string;
	InternationalShipping: string;
	SelfServiceWorkplacesCount: string;
	TotalMaxWeightAllowed: string;
	PlaceMaxWeightAllowed: string;
	SendingLimitationsOnDimensions: LimitationsOnDimensions;
	ReceivingLimitationsOnDimensions: LimitationsOnDimensions;
	Reception: Delivery;
	Delivery: Delivery;
	Schedule: Delivery;
	DistrictCode: string;
	WarehouseStatus: string;
	WarehouseStatusDate: string;
	CategoryOfWarehouse: string;
	RegionCity: string;
	WarehouseForAgent: string;
	MaxDeclaredCost: string;
	DenyToSelect: string;
	PostMachineType: string;
	PostalCodeUA: string;
	OnlyReceivingParcel: string;
	WarehouseIndex: string;
};
export interface NpBaseSelectOption {
	value: string;
	label: string;
}
export type NpBaseSelectSharedProperties = {
	root: HTMLElement;
	button: {
		text?: string;
		icon?: string;
	};
	input: {
		name?: string;
		placeholder?: string;
	};
	placeholder?: {
		text: string;
	};
	options?: NpBaseSelectOption[];
	apiKey: string;
};
export type NpBaseSelectSharedMethods = {
	getOption: (value: Record<any, any>) => NpBaseSelectOption;
	onInput?: (value: string, select: NpBaseSelect) => void;
	onOpen?: (select: NpBaseSelect) => any;
	onMounted?: (select: NpBaseSelect) => void;
	onSelect?: (item: NpBaseSelectOption, select: NpBaseSelect) => void;
};
export type NpBaseSelectConfig = NpBaseSelectSharedProperties & NpBaseSelectSharedMethods & {
	onSelect?: (item: NpBaseSelectOption, select: NpBaseSelect) => void;
};
export type NpCitySelectConfig = Omit<NpBaseSelectConfig, "getOption"> & {
	onSelect?: (item: NpBaseSelectOption, select: NpBaseSelect) => void;
	getOption?: (item: NpGetSettlementsResponseAddress) => NpBaseSelectOption;
};
export type NpWarehouseSelectConfig = Omit<NpBaseSelectConfig, "getOption"> & {
	city?: string;
	getOption?: (item: NpGetWarehousesResponseData) => NpBaseSelectOption;
};
export type ApiConfig = {
	apiKey: string;
};
declare class NpApi {
	private config;
	private API_URL;
	constructor(config: ApiConfig);
	getNpCities(input: string): Promise<NpGetSettlementsResponseAddress[]>;
	getNpWarehouses(city: string): Promise<NpGetWarehousesResponseData[]>;
	private getConfig;
}
declare class NpBaseSelect {
	private options;
	private filtered;
	private open;
	private value;
	private button;
	private input;
	private placeholder;
	private selected;
	private disabled;
	private loading;
	$root: HTMLElement;
	$wrapper: HTMLElement;
	$button: HTMLButtonElement;
	$input: HTMLInputElement;
	$select: HTMLDivElement;
	$placeholder: HTMLDivElement;
	getOption: NpBaseSelectConfig["getOption"];
	private onSelect?;
	private onInput?;
	private onOpen?;
	private onMounted?;
	api: NpApi;
	constructor({ root, button, input, options, getOption, onSelect, onInput, onOpen, onMounted, apiKey, }: NpBaseSelectConfig);
	validate(): boolean;
	setLoading(loading: boolean): void;
	getLoading(): boolean;
	setSelected(value: string): void;
	getSelected(): {
		value: string;
		option: NpBaseSelectOption;
	};
	setValue(value?: string): void;
	getValue(): string;
	setOptions(options: Record<any, any>[]): void;
	getOptions(): NpBaseSelectOption[];
	setFiltered(filtered: NpBaseSelectOption[]): void;
	getFiltered(): NpBaseSelectOption[];
	setOpen(open: boolean): void;
	setDisabled(disabled: boolean): void;
	private build;
	private createSelect;
	private createSelectOptions;
	private createButton;
	private setButtonText;
	private setEmptyState;
	private handleOpen;
	private handleClose;
	private handleSelect;
	private handleInput;
}
export declare const NpCitySelect: (config: NpCitySelectConfig) => NpBaseSelect;
export declare const NpWarehouseSelect: (config: NpWarehouseSelectConfig) => NpBaseSelect;
export declare const utils: {
	validateMultiple: (selects: NpBaseSelect[]) => boolean;
};

export as namespace NpSelect;

export {};
